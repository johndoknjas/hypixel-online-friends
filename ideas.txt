# CONTINUE HERE - todos:

    # Consider including network levels when outputting dict reports.

    # For bw stars >= 1000, print in the actual colours they should be, rather than yellow and blinking.

    # Consider refactoring to not need the HEX.UNKNOWN hacky stuff used in hypixel.py.

    # Update the readme with instructions on using the other features.

    # The hypixel api has an endpoint for player counts for various games. Add a feature that displays this.

    # For arg players, you could display the date of their last login (if available through the api).
      # And for friends too, at least when doing the 'all' feature (since only makes sense for offline ones).

    # Run pylint as a test in `tests.py`, where you assert certain error codes aren't raised.
      For flake8, you can update the `run-tests` file to include more error codes there as well.

    # Update the vermin test in lintception to allow the user to test for an exact entire output message.
      Then, add this expected message in a .lintception file for this project.
        - Also once lintception is updated with allowing the user to specify certain files that should
          be empty, specify the __init__.py in the hypickle folder.

    # Can include some linters mentioned here in your tests as well (e.g., bandit):
      https://realpython.com/python-code-quality/

    # Saw 'Exited PIT -0.01 mins ago' (on May 3). Did a bug fix in April (commit 29587138) that seemed to
      resolve this, but maybe it can still occasionally come up if hypixel is slightly off in how they
      track time compared to my computer. If another -0.01 comes up in the future, consider investigating.

    # Could estimate the amount of memory returned from each call in getJSON, using this:
      https://stackoverflow.com/a/10387636/7743427
      Make a folder where each file is the estimated memory used during a given day. Then
      add a feature that outputs this info to the user.
        - If the total memory usage within the past x days exceeds some amount of GBs, you could
          output this to the user when they run the program normally. But don't keep
          outputting this message every time they run the program afterwards.
        - And if memory usage during a single run of the program exceeds a certain amount, you
          could tell the user and ask them to enter 'y' to continue.

    # https://hypixel.fandom.com/wiki/Ranks
      Consider handling the other 'Special' ranks (only handle 'YOUTUBE' right now).

    # Could use the `"prestiges"` key in a player's json to output the total time it takes to get
      1 XP (on average, and not just playtime), in the previous prestige. Can help give more useful
      predictions for how many weeks/months the next few prestiges will take.

    # Make a function in hypixel.py that returns a number of leaderboards, obtained from
      https://api.hypixel.net/#tag/Other/paths/~1v2~1leaderboards/get. Then, the user can enter
      which leaderboard they want to see, and it can be outputted with each player's stats per row.
      All the igns/uuids of these players can be outputted after as well, in one big chunk (same
      kind of format your player-name project does).
        - Can also output whether any friends (on a normal program run) appear on any leaderboards,
          and if so which.

    # Consider making a report class instead of report dicts. The class could have a function that makes and
      returns a dict.

    # For the future annotations test in `tests.py`, update it so that it's still fine if one docstring
      comes before the future annotations statement, but no more than one. See
      https://stackoverflow.com/questions/38688504/from-future-imports-must-occur-at-the-beginning-of-the-file-what-defines

    # Consider sleeping in the while loop for perpetual passes, to ensure only one per min (at most) is done.
      # The point of this would be to avoid doing repetitive output so often.

    # Try to find some way to limit false negatives for the online statuses of players who have it
      available through the api. I.e., players who are offline at the start of the program's run,
      but online later.

    # Replace using a white background for pit ranks with black brackets.

    # Do something similar to the pit percent feature, but for nw levels. I.e., just
      a level value is given by the user, no player igns required.

    # Consider outputting info on additional friends files as well for checkresults.

    # Make some updates to Args related stuff:
      - Get rid of any features you don't use.
      - Add an Arg keyword for just getting additional friends.
      - Consider making the positional arg keywords (in main.py) be encapsulated within Args.py.
        - Then, functions like get_arguments could have an additional param for 'remove_positional_keywords'.
        - Could also make a function for 'get_positional_keywords'.
        - And update current usage of 'keywords' related stuff in Args to be 'global_keywords'.

    # Have a way to check whether someone is a friend. Similar to 'friendedwhen', but not requiring
      a date.
        # Note that this is now kind of already done with the friendedwhen feature (if a player is
          friends but the date isn't recorded in the list, a note is outputted). However, it's still
          best to do an 'isfriend' feature, since the 'friendedwhen' feature makes having
          dates in the friends list it selects a top priority.
        # Although the best solution more generally might just be not picking the 'best' standard
          friends list in ProcessingResults, and instead combining them like you do with additionals.

    # For 'friendedwhen', if a friend appears as an additional friend and in an older standard friends list,
      display both dates.

    # Add a new textfile called "old names" or something, which stores uuid-ign pairs for what you want a friend's
      "old name" to be printed as. Could be used for friends whose outputted old name isn't one you recognize as
      much as one of their other old names.
        # You would also add a way for the user to update this textfile from the command line.

    # A bit under 8000 players (who aren't your friend) have their ign recorded in the results folder. So, if any
      become your friend in the future, their old name will be displayed as the ign from this point
      (Dec/22-Jan/23 ish). This isn't a big deal since it'd be interesting to find out if we have a mutual
      friend, and 8000 players is a small fraction of the total player pool. But if there's a way to display
      this oldest ign, as well as the ign for when you've now friended them going forward, that could be good.

    # Consider if there's a better algorithm for when to do second passes, due to the updated api rate limit of
      300 per 5 mins, rather than 60 per 1 min.

    # Periodically run pylint on the project (`pylint *.py`).

    # For the pit percent feature:
      # Output info on percentages where 0 to 50 progress (from fast pass) is excluded.
      # Maybe have a way for the user to enter an xp value, as an alternative to a rank string.
      # Consider showing the percent distance (xp wise) each pair of levels are from each other,
        assuming the user enters multiple. The prestiges should be the same when comparing, but could just
        consider levels on their own. Can also show the xp distance between the two levels.

    # Have a way to just output additional friends.

    # Have some way for users to set persistent defaults for their Args settings, if they want.

    # For info on each arg player, maybe don't output the number of friends in the 'single friends list/file'
      thing. For any users of the PyPI library, it will be 0. But find a way to still show it for you.
      E.g., some persistent arg thing like above.

    # Add a command that lets you enter a uuid-ign pair from the terminal, to update uuids.txt.
      # If a given uuid/ign exists in uuids.txt already, have the user confirm they want to replace it.

    # Consider using lazy initialization for self.JSON in hypixel.py.
      # However, for the getOnline feature it'd be good to have an original player json to compare against,
        so maybe make lazy init. an option at most.

    # In hypixel.get_uuid(), maybe add an optional param that gets the function to skip doing the
      Player(possible_uuid).getName().lower() check.

----------------------------------

    # Add a way for the user to include parentheses in the cli args, if they want to control precedence.
      Could also add an option for a union symbol (e.g., 'v' or '\/' or 'union'), but this is already the
      default operation with just a space between args.

    # Make an arg keyword 'leaderboard', that if entered will get the igns of the top x (maybe 10?) players
      on some bw daily leaderboard, and puts their igns (or uuids) in the Args instance (as if they were entered
      by the user). This processing could be handled in main.py, since importing the hypixel.py file
      will be needed. Main.py can then send a list of igns/uuids to the Args instance via some member function
      you'll write.

    -----------------------------------

    # Add a feature to just get friends over a certain fkdr.
        # When this is implemented you could then run the program and save this list a file, and then
        # just go through this file when looking for people to party online.

    # Add a feature where if 'avg' is a command line argument, the average size will be calculated for
    # all friends lists the program comes across. Could also make a 'total' arg, that displays the total
    # number of (unique) friends in all f lists processed.

    # Add a feature that aims to backup the friends lists of most of the (active part?) of the hypixel server.
        # A good way to do this is use the hypixel api to get players on the daily bedwars leaderboard.
        # This will update every day, and the people on the leaderboard are obviously active players who
        # probably are friends with other active players.

        # So could go through each daily leaderboard, pick the top 10, get their 10 most recently added friends,
        # get their 10 most recently added friends, etc until something like 1000-10,000. You can backup these
        # many friends lists then.
            # Important that before continuing down this "tree" at a given player, you check that their
            # f list is not already backed up in the results folder.
                # When doing this, can also record how many of these players already have their f lists
                # recorded in the results folder. This
                # can give you an idea as time goes on of approx. what percentage of f lists of active bw
                # players you've backed up.
                    # At the time of writing this percentage should be pretty low though, since it's under 10,000
                    # players' f lists recorded in results.