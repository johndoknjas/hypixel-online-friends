# CONTINUE HERE - todos:

    # Add type hinting to places in hypixel.py that don't have it.

    # Clean up any misc code in hypixel.py that could benefit from it.

    # Run pylint on the project.

    # Output Pit stats, in addition to Bedwars.

    # Have a way to just output additional friends.

    # Have a way to check whether someone is a friend. Similar to 'friendedwhen', but not requiring
      a date.

    # Add a command that lets you enter a uuid-ign pair from the terminal, to update uuids.txt.
      # If a given uuid/ign exists in uuids.txt already, have the user confirm they want to replace it.

    # Consider using lazy initialization for self.JSON in hypixel.py.

    # In hypixel.get_uuid(), maybe add an optional param that gets the function to skip doing the
      Player(possible_uuid).getName().lower() check.

    # Consider reimplementing a cache, but with a lower time limit (like only a few seconds), just to
    # skip the 5ish extra unneeded API calls at the beginning for cli arg players (maybe not worth it?).
      # If you do this, no need to store request urls in the cache I think. Just store uuids/igns as the keys.
      # Another option to limit a few of these early API calls is to add uuids for your main accs to the aliases
        textfile. Although again, hardly any gains.

    # For using the aliases textfile, you could do an outer loop to loop through all the lines (alias pairs), 
      until an iteration doesn't change the args list. This could be useful if you had aliases ordered like this
      in the textfile:
      B = D
      A = B C
      First iteration changes A to B C, and then the second iteration lets the program change
      # B C to D C.

    # Consider (at least as an option) to do something like this:
      # On first pass at every 100, 200, 400, 800, etc, do a second pass up to that point.
        # To scan again for players with online status off.
        # Shouldn't take too long to do too, so not that expensive.
        # Ideally, shouldn't print to the screen any players that were found on any previous 'second passes'
          of this first big pass.
            # E.g., if at the 400 point, shouldn't print any players both for this main first pass up to here,
              nor for any players found on the 'second' passes up to 100 and up to 200.
            # But should still start from 0 and go till 400, scanning players that have the online status off.
      # Then after all this, continue indefinitely with the perpetual passes, as you currently do them.

----------------------------------

    # Add a way for the user to include parentheses in the cli args, if they want to control precedence.
      Could also add an option for a union symbol (e.g., 'v' or '\/' or 'union'), but this is already the
      default operation with just a space between args.
    
    # When the program starts, call the hypixel api to get the number of calls remaining for the current minute
      for the api key (e.g., maybe you had just run the program). Then, set the num_api_calls_made global var
      to 120 minus the value returned.
        # See https://api.hypixel.net/#tag/API

    # When an ign/uuid is given as a command line argument, update the uuids.txt file with its pair, if
      the file doesn't already contain it.
        # Also, when the getName() function of hypixel.py is called, you could update the uuids file if the
          uuid-ign pair doesn't exist in it yet.

    # Make an arg keyword 'leaderboard', that if entered will get the igns of the top x (maybe 10?) players
      on some bw daily leaderboard, and puts their igns (or uuids) in the Args instance (as if they were entered
      by the user). This processing could be handled in main.py, since importing the hypixel.py file
      will be needed. Main.py can then send a list of igns/uuids to the Args instance via some member function
      you'll write.

    # Added a textfile ('additional_friends.txt') where igns of people friended can be added. This is due to
      Hypixel disabling the friends api endpoint.
        # Implement a feature where, when specified by an argument, the program will get the igns from
          this file and add them to the combined friends list to search.
        # The friends in this textfile should be treated as the ones most recently added, in relation to
          the friends retrieved through the api.
            # If a friend in this textfile overlaps with the combined friends list, both duplicate uuids
              obviously shouldn't be kept. The one in the textfile should override the other, and the friend
              should be treated as recent (even if they were friended a long time ago via the combined
              friends list).
            # Can probably add these friends in this textfile to the combined friends list after the call
              to combine_players / polish_friends_list or something.
        # And within the textfile itself, friends added in the bottom/later lines should be treated as
          more recently added.
    
    # Make a feature where for igns given after a certain command line arg (such as 'contains'?), the program
      will check if they are in the f list (that it makes for the earlier arg(s)).
        # Only positional args coming after 'contains' should be igns. I.e., if a '-' is present it should have
          been before, and also no filenames after 'contains' (since it's just igns, not f lists for them).

    -----------------------------------

    # Add a feature to just get friends over a certain fkdr.
        # When this is implemented you could then run the program and save this list a file, and then 
        # just go through this file when looking for people to party online.

    # Add a feature where if 'avg' is a command line argument, the average size will be calculated for
    # all friends lists the program comes across. Could also make a 'total' arg, that displays the total
    # number of (unique) friends in all f lists processed.

    # Add a feature that aims to backup the friends lists of most of the (active part?) of the hypixel server.
        # A good way to do this is use the hypixel api to get players on the daily bedwars leaderboard.
        # This will update every day, and the people on the leaderboard are obviously active players who
        # probably are friends with other active players.

        # So could go through each daily leaderboard, pick the top 10, get their 10 most recently added friends,
        # get their 10 most recently added friends, etc until something like 1000-10,000. You can backup these
        # many friends lists then.
            # Important that before continuing down this "tree" at a given player, you check that their
            # f list is not already backed up in the results folder.
                # When doing this, can also record how many of these players already have their f lists
                # recorded in the results folder. This
                # can give you an idea as time goes on of approx. what percentage of f lists of active bw
                # players you've backed up.
                    # At the time of writing this percentage should be pretty low though, since it's under 10,000
                    # players' f lists recorded in results.