# CONTINUE HERE - todos:

    # Add an intersection operation for the arguments, that says to get players who are friends of both
    # players specified. So now three operators: union, intersection, difference.
        # keep no operator between two players as meaning union (can also add 'v' that the user can
        use to optionally specify if they want though).
        # '-' still means difference
        # ^ can mean intersection.
        # To allow the existing format of arguments to work, union will have higher precedence than difference.
            # e.g., p1 p2 - p3 p4 should still mean the union of p1 and p2's friends minus the 
              union of p3 and p4's friends.
        # Allow the user to add parentheses if they want to specify some specific precedence.
            # E.g., p1 (p2 - p3 p4) would evaluate p2 to p4 stuff first and then union that with p1's friends.
    
    # When the program starts, call the hypixel api to get the number of calls remaining for the current minute
      for the api key (e.g., maybe you had just run the program). Then, set the num_api_calls_made global var
      to 120 minus the value returned.
        # See https://api.hypixel.net/#tag/API

    # When an ign/uuid is given as a command line argument, update the uuids.txt file with its pair, if
      the file doesn't already contain it.
        # Also, when the getName() function of hypixel.py is called, you could update the uuids file if the
          uuid-ign pair doesn't exist in it yet.

    # Make an arg keyword 'leaderboard', that if entered will get the igns of the top x (maybe 10?) players
      on some bw daily leaderboard, and puts their igns (or uuids) in the Args instance (as if they were entered
      by the user). This processing could be handled in main.py, since importing the hypixel.py file
      will be needed. Main.py can then send a list of igns/uuids to the Args instance via some member function
      you'll write.
    
    # Add an option where, if the user wants to get the f list of a player from a textfile, instead of having to
      give the name of the textfile, they can just get the program to search through the results folder.
      It will find the biggest friends list for the given player (already did this in ProcessingResults),
      and then just use that.

    # Added a textfile ('additional_friends.txt') where igns of people friended can be added. This is due to
      Hypixel disabling the friends api endpoint.
        # Implement a feature where, when specified by an argument, the program will get the igns from
          this file and add them to the combined friends list to search.
        # The friends in this textfile should be treated as the ones most recently added, in relation to
          the friends retrieved through the api.
        # And within the textfile itself, friends added in the bottom/later lines should be treated as
          more recently added.
    
    # 'fromresultsall' option - applies 'fromresults' for every ign/uuid given via args.

    # Do a mypy pass.

    -----------------------------------

    # Add a feature to just get friends over a certain fkdr.
        # When this is implemented you could then run the program and save this list a file, and then 
        # just go through this file when looking for people to party online.

    # Add a feature where if 'avg' is a command line argument, the average size will be calculated for
    # all friends lists the program comes across. Could also make a 'total' arg, that displays the total
    # number of (unique) friends in all f lists processed.

    # Add a feature that aims to backup the friends lists of most of the (active part?) of the hypixel server.
        # A good way to do this is use the hypixel api to get players on the daily bedwars leaderboard.
        # This will update every day, and the people on the leaderboard are obviously active players who
        # probably are friends with other active players.

        # So could go through each daily leaderboard, pick the top 10, get their 10 most recently added friends,
        # get their 10 most recently added friends, etc until something like 1000-10,000. You can backup these
        # many friends lists then.
            # Important that before continuing down this "tree" at a given player, you check that their
            # f list is not already backed up in the results folder.
                # When doing this, can also record how many of these players already have their f lists
                # recorded in the results folder. This
                # can give you an idea as time goes on of approx. what percentage of f lists of active bw
                # players you've backed up.
                    # At the time of writing this percentage should be pretty low though, since it's under 10,000
                    # players' f lists recorded in results.