# CONTINUE HERE - todos:

    # Consider including network levels when outputting dict reports.

    # For players in arguments, do something similar to bedwars stars as you do with pit prestiges/levels.
      E.g., how far through the current bw prestige a player is, how close a player is to a given prestige over
      all their total playtime.

    # Do something similar to the pit percent feature, but for nw levels and possibly bw stars. I.e., just
      a rank value is given by the user, no player igns required. Also do something similar to pitplot.

    # Have a way to check whether someone is a friend. Similar to 'friendedwhen', but not requiring
      a date.

    # For 'friendedwhen', if a friend appears as an additional friend and in an older standard friends list,
      display both dates.

    # Add a new textfile called "old names" or something, which stores uuid-ign pairs for what you want a friend's
      "old name" to be printed as. Could be used for friends whose outputted old name isn't one you recognize as
      much as one of their other old names.
        # You would also add a way for the user to update this textfile from the command line.

    # A bit under 8000 players (who aren't your friend) have their ign recorded in the results folder. So, if any
      become your friend in the future, their old name will be displayed as the ign from this point 
      (Dec/22-Jan/23 ish). This isn't a big deal since it'd be interesting to find out if we have a mutual 
      friend, and 8000 players is a small fraction of the total player pool. But if there's a way to display
      this oldest ign, as well as the ign for when you've now friended them going forward, that could be good.

    # Consider if there's a better algorithm for when to do second passes, due to the updated api rate limit of
      300 per 5 mins, rather than 60 per 1 min.

    # Consider using f-strings for all occurrences of " + or ' + or + " or + '

    # Periodically run pylint on the project (`pylint *.py`).

    # Have a way to just output additional friends.

    # Add a command that lets you enter a uuid-ign pair from the terminal, to update uuids.txt.
      # If a given uuid/ign exists in uuids.txt already, have the user confirm they want to replace it.

    # Consider using lazy initialization for self.JSON in hypixel.py.

    # In hypixel.get_uuid(), maybe add an optional param that gets the function to skip doing the
      Player(possible_uuid).getName().lower() check.

----------------------------------

    # Add a way for the user to include parentheses in the cli args, if they want to control precedence.
      Could also add an option for a union symbol (e.g., 'v' or '\/' or 'union'), but this is already the
      default operation with just a space between args.

    # Make an arg keyword 'leaderboard', that if entered will get the igns of the top x (maybe 10?) players
      on some bw daily leaderboard, and puts their igns (or uuids) in the Args instance (as if they were entered
      by the user). This processing could be handled in main.py, since importing the hypixel.py file
      will be needed. Main.py can then send a list of igns/uuids to the Args instance via some member function
      you'll write.

    -----------------------------------

    # Add a feature to just get friends over a certain fkdr.
        # When this is implemented you could then run the program and save this list a file, and then 
        # just go through this file when looking for people to party online.

    # Add a feature where if 'avg' is a command line argument, the average size will be calculated for
    # all friends lists the program comes across. Could also make a 'total' arg, that displays the total
    # number of (unique) friends in all f lists processed.

    # Add a feature that aims to backup the friends lists of most of the (active part?) of the hypixel server.
        # A good way to do this is use the hypixel api to get players on the daily bedwars leaderboard.
        # This will update every day, and the people on the leaderboard are obviously active players who
        # probably are friends with other active players.

        # So could go through each daily leaderboard, pick the top 10, get their 10 most recently added friends,
        # get their 10 most recently added friends, etc until something like 1000-10,000. You can backup these
        # many friends lists then.
            # Important that before continuing down this "tree" at a given player, you check that their
            # f list is not already backed up in the results folder.
                # When doing this, can also record how many of these players already have their f lists
                # recorded in the results folder. This
                # can give you an idea as time goes on of approx. what percentage of f lists of active bw
                # players you've backed up.
                    # At the time of writing this percentage should be pretty low though, since it's under 10,000
                    # players' f lists recorded in results.